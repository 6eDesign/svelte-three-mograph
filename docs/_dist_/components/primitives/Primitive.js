/* src/components/primitives/Primitive.svelte generated by Svelte v3.31.2 */
import { SvelteComponent, init, safe_not_equal } from "../../../web_modules/svelte/internal.js";

import { getContext, onMount } from "../../../web_modules/svelte.js";
import { MeshPhongMaterial, Mesh } from "../../../web_modules/three.js";

function instance($$self, $$props, $$invalidate) {
	let { Geometry } = $$props;
	let { size } = $$props;
	let { color = "#fff" } = $$props;
	let { x = 0 } = $$props;
	let { y = 0 } = $$props;
	let { z = 0 } = $$props;
	let { yRotation = 0 } = $$props;
	let { xRotation = 0 } = $$props;
	let { zRotation = 0 } = $$props;
	let { renderFn } = $$props;
	const geometry = new Geometry(...size);
	const material = new MeshPhongMaterial({ color: Math.random() * 16777215 });
	const mesh = new Mesh(geometry, material);
	const primitive = new Mesh(mesh, material);
	const sceneCtx = getContext("sceneCtx");
	sceneCtx.scene.add(mesh);

	if (renderFn) {
		sceneCtx.renderFns = [...sceneCtx.renderFns, renderFn];
	}

	onMount(() => {
		() => {
			sceneCtx.scene.remove(mesh);
			mesh.geometry.dispose();
			mesh.material.dispose();
		};
	});

	$$self.$$set = $$props => {
		if ("Geometry" in $$props) $$invalidate(0, Geometry = $$props.Geometry);
		if ("size" in $$props) $$invalidate(1, size = $$props.size);
		if ("color" in $$props) $$invalidate(2, color = $$props.color);
		if ("x" in $$props) $$invalidate(3, x = $$props.x);
		if ("y" in $$props) $$invalidate(4, y = $$props.y);
		if ("z" in $$props) $$invalidate(5, z = $$props.z);
		if ("yRotation" in $$props) $$invalidate(6, yRotation = $$props.yRotation);
		if ("xRotation" in $$props) $$invalidate(7, xRotation = $$props.xRotation);
		if ("zRotation" in $$props) $$invalidate(8, zRotation = $$props.zRotation);
		if ("renderFn" in $$props) $$invalidate(9, renderFn = $$props.renderFn);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*x, y, z*/ 56) {
			$: mesh.position.set(x, y, z);
		}

		if ($$self.$$.dirty & /*xRotation, yRotation, zRotation*/ 448) {
			$: mesh.rotation.set(xRotation, yRotation, zRotation);
		}
	};

	return [Geometry, size, color, x, y, z, yRotation, xRotation, zRotation, renderFn];
}

class Primitive extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, null, safe_not_equal, {
			Geometry: 0,
			size: 1,
			color: 2,
			x: 3,
			y: 4,
			z: 5,
			yRotation: 6,
			xRotation: 7,
			zRotation: 8,
			renderFn: 9
		});
	}
}

export default Primitive;