/* src/components/Scene.svelte generated by Svelte v3.31.2 */
import {
	SvelteComponent,
	binding_callbacks,
	create_component,
	create_slot,
	destroy_component,
	detach,
	element,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	transition_in,
	transition_out,
	update_slot
} from "../../web_modules/svelte/internal.js";

import { onMount, setContext, tick } from "../../web_modules/svelte.js";
import { writable } from "../../web_modules/svelte/store.js";
import { Scene, Color, PerspectiveCamera, WebGLRenderer } from "../../web_modules/three.js";
import { Material } from "./index.js";

function create_default_slot(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 128) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[7], dirty, null, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let t;
	let material;
	let current;

	material = new Material({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			div = element("div");
			t = space();
			create_component(material.$$.fragment);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			/*div_binding*/ ctx[6](div);
			insert(target, t, anchor);
			mount_component(material, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const material_changes = {};

			if (dirty & /*$$scope*/ 128) {
				material_changes.$$scope = { dirty, ctx };
			}

			material.$set(material_changes);
		},
		i(local) {
			if (current) return;
			transition_in(material.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(material.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			/*div_binding*/ ctx[6](null);
			if (detaching) detach(t);
			destroy_component(material, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let { width = 600 } = $$props;
	let { height = 400 } = $$props;
	let { background = "#fff" } = $$props;
	let target;
	const scene = new Scene();
	scene.background = new Color(background);
	const camera = new PerspectiveCamera(75, width / height, 0.1, 1000);
	const renderer = new WebGLRenderer({ alpha: true, antialias: true });
	camera.position.z = 5;
	renderer.setSize(width, height);

	const ctx = {
		scene,
		camera,
		renderer,
		renderFns: [],
		time: writable(Date.now())
	};

	setContext("sceneCtx", ctx);

	onMount(() => {
		let rafId;

		const animate = async () => {
			ctx.time.set(Date.now());
			renderer.render(scene, camera);
			await tick();
			rafId = requestAnimationFrame(animate);
		};

		animate();
		return () => cancelAnimationFrame(rafId);
	});

	function div_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			target = $$value;
			$$invalidate(0, target);
		});
	}

	$$self.$$set = $$props => {
		if ("width" in $$props) $$invalidate(1, width = $$props.width);
		if ("height" in $$props) $$invalidate(2, height = $$props.height);
		if ("background" in $$props) $$invalidate(3, background = $$props.background);
		if ("$$scope" in $$props) $$invalidate(7, $$scope = $$props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*target*/ 1) {
			$: target && target.appendChild(renderer.domElement);
		}
	};

	return [target, width, height, background, ctx, slots, div_binding, $$scope];
}

class Scene_1 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			width: 1,
			height: 2,
			background: 3,
			ctx: 4
		});
	}

	get ctx() {
		return this.$$.ctx[4];
	}
}

export default Scene_1;