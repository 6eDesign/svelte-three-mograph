import './App.css.proxy.js';
/* src/App.svelte generated by Svelte v3.31.2 */
import {
	SvelteComponent,
	add_render_callback,
	check_outros,
	create_component,
	destroy_component,
	detach,
	empty,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "../web_modules/svelte/internal.js";

import Scene from "./components/Scene.js";
import Emitter from "./components/mograph/Emitter.js";

import {
	Cube,
	Icosahedron,
	Octahedron,
	Sphere,
	Tetrahedron,
	Torus,
	TorusKnot
} from "./components/primitives/index.js";

import { AmbientLight, DirectionalLight } from "./components/lights/index.js";

function create_if_block(ctx) {
	let scene;
	let current;

	scene = new Scene({
			props: {
				background: "#eee",
				width: /*width*/ ctx[0],
				height: /*height*/ ctx[1],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(scene.$$.fragment);
		},
		m(target, anchor) {
			mount_component(scene, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const scene_changes = {};
			if (dirty & /*width*/ 1) scene_changes.width = /*width*/ ctx[0];
			if (dirty & /*height*/ 2) scene_changes.height = /*height*/ ctx[1];

			if (dirty & /*$$scope*/ 1024) {
				scene_changes.$$scope = { dirty, ctx };
			}

			scene.$set(scene_changes);
		},
		i(local) {
			if (current) return;
			transition_in(scene.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(scene.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(scene, detaching);
		}
	};
}

// (22:4) <Emitter       let:x       let:y       let:z       let:xRotation       let:yRotation       let:zRotation       position={[0,0,0]}       size={[1,1,0]}       particlesPerSecond={155}       velocity={.19}       direction={[0,1,.09]}       forces={[ gravity ]}     >
function create_default_slot_1(ctx) {
	let icosahedron;
	let current;

	icosahedron = new Icosahedron({
			props: {
				size: 0.05,
				x: /*x*/ ctx[4],
				y: /*y*/ ctx[5],
				z: /*z*/ ctx[6],
				xRotation: /*xRotation*/ ctx[7],
				yRotation: /*yRotation*/ ctx[8],
				zRotation: /*zRotation*/ ctx[9]
			}
		});

	return {
		c() {
			create_component(icosahedron.$$.fragment);
		},
		m(target, anchor) {
			mount_component(icosahedron, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const icosahedron_changes = {};
			if (dirty & /*x*/ 16) icosahedron_changes.x = /*x*/ ctx[4];
			if (dirty & /*y*/ 32) icosahedron_changes.y = /*y*/ ctx[5];
			if (dirty & /*z*/ 64) icosahedron_changes.z = /*z*/ ctx[6];
			if (dirty & /*xRotation*/ 128) icosahedron_changes.xRotation = /*xRotation*/ ctx[7];
			if (dirty & /*yRotation*/ 256) icosahedron_changes.yRotation = /*yRotation*/ ctx[8];
			if (dirty & /*zRotation*/ 512) icosahedron_changes.zRotation = /*zRotation*/ ctx[9];
			icosahedron.$set(icosahedron_changes);
		},
		i(local) {
			if (current) return;
			transition_in(icosahedron.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(icosahedron.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(icosahedron, detaching);
		}
	};
}

// (19:2) <Scene background='#eee' {width} {height}>
function create_default_slot(ctx) {
	let ambientlight;
	let t0;
	let directionallight;
	let t1;
	let emitter;
	let current;
	ambientlight = new AmbientLight({});
	directionallight = new DirectionalLight({});

	emitter = new Emitter({
			props: {
				position: [0, 0, 0],
				size: [1, 1, 0],
				particlesPerSecond: 155,
				velocity: 0.19,
				direction: [0, 1, 0.09],
				forces: [/*gravity*/ ctx[2]],
				$$slots: {
					default: [
						create_default_slot_1,
						({ x, y, z, xRotation, yRotation, zRotation }) => ({
							4: x,
							5: y,
							6: z,
							7: xRotation,
							8: yRotation,
							9: zRotation
						}),
						({ x, y, z, xRotation, yRotation, zRotation }) => (x ? 16 : 0) | (y ? 32 : 0) | (z ? 64 : 0) | (xRotation ? 128 : 0) | (yRotation ? 256 : 0) | (zRotation ? 512 : 0)
					]
				},
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(ambientlight.$$.fragment);
			t0 = space();
			create_component(directionallight.$$.fragment);
			t1 = space();
			create_component(emitter.$$.fragment);
		},
		m(target, anchor) {
			mount_component(ambientlight, target, anchor);
			insert(target, t0, anchor);
			mount_component(directionallight, target, anchor);
			insert(target, t1, anchor);
			mount_component(emitter, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const emitter_changes = {};

			if (dirty & /*$$scope, x, y, z, xRotation, yRotation, zRotation*/ 2032) {
				emitter_changes.$$scope = { dirty, ctx };
			}

			emitter.$set(emitter_changes);
		},
		i(local) {
			if (current) return;
			transition_in(ambientlight.$$.fragment, local);
			transition_in(directionallight.$$.fragment, local);
			transition_in(emitter.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(ambientlight.$$.fragment, local);
			transition_out(directionallight.$$.fragment, local);
			transition_out(emitter.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(ambientlight, detaching);
			if (detaching) detach(t0);
			destroy_component(directionallight, detaching);
			if (detaching) detach(t1);
			destroy_component(emitter, detaching);
		}
	};
}

function create_fragment(ctx) {
	let if_block_anchor;
	let current;
	let mounted;
	let dispose;
	add_render_callback(/*onwindowresize*/ ctx[3]);
	let if_block = /*width*/ ctx[0] && /*height*/ ctx[1] && create_if_block(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;

			if (!mounted) {
				dispose = listen(window, "resize", /*onwindowresize*/ ctx[3]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*width*/ ctx[0] && /*height*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*width, height*/ 3) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let width;
	let height;

	const gravity = {
		direction: [0, -0.009, 0],
		rotation: [0, 0, 0]
	};

	function onwindowresize() {
		$$invalidate(0, width = window.innerWidth)
		$$invalidate(1, height = window.innerHeight)
	}

	return [width, height, gravity, onwindowresize];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default App;